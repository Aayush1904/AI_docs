// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}


model User{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl String?
  firstName String?
  lastName String?

  emailAddress String @unique

  credits Int @default(150)

  userToProjects UserToProject[]
  questionAsked Question[]
  comments Comment[]
}

model Project{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String 
  githubUrl String

  deletedAt DateTime?
  indexingStatus IndexingStatus @default(pending)
  userToProjects UserToProject[]
  commits Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  savedQuestions Question[]
  comments Comment[]
}

enum IndexingStatus {
  pending
  in_progress
  completed
  failed
}

model UserToProject{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String 
  projectId String 

  user User @relation(fields: [userId] , references: [id])
  project Project @relation(fields: [projectId] , references: [id])

  @@unique([userId , projectId])
}

model Question {
   id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer String
  fileReferences Json?
  projectId String

  project Project @relation(fields: [projectId] , references: [id])

  userId String 
  user User @relation(fields: [userId] , references: [id])
  comments Comment[]
}

model Commit {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String 
  project Project @relation(fields: [projectId], references: [id])
  commitMessage String
  commitHash String
  commitAuthorName String 
  commitAuthorAvatar String 
  commitDate DateTime
  summary String
  comments Comment[]
}

model SourceCodeEmbedding {
  id String @id @default(cuid())
  summaryEmbedding Unsupported("vector(768)")? 
  sourceCode String
  fileName String
  summary String

  projectId String 
  project Project @relation(fields: [projectId], references: [id]) // Relation to Project
}

model Comment {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  userId String
  user User @relation(fields: [userId], references: [id])

  projectId String
  project Project @relation(fields: [projectId], references: [id])

  // Either questionId or commitId must be set
  questionId String?
  question Question? @relation(fields: [questionId], references: [id])

  commitId String?
  commit Commit? @relation(fields: [commitId], references: [id])

  @@index([projectId])
  @@index([questionId])
  @@index([commitId])
}
